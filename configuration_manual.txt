Inputs:
-------
type [button, ultrasonic, ir]
	type=button
		pin			[gpio pin for button]
		power		[gpio pin for supplying 3.3v]
		holdTime	[refresh rate for hold events]
		onpress		<command>
		onrelease	<command>
			Extra command properties:
			holdMax		[Max hold time in seconds]
			holdMin		[Min hold time in seconds]
	type=ultrasonic
		trigger		[gpio pin for trigger]
		echo		[gpio pin for echo]
		minDetect	[minimum distance to detect]
		maxDetect	[maximum distance to detect]
		minSleep	[lower sleep boundary, optional]
		maxSleep	[upper sleep boundary, optional]
		sleepTimes	[number of sleep values before going to sleep mode, optional]
		onchange	<command>
	type=ir
		onpress
			key			[trigger name]
			<command>	[all properties of a normal command (note that this is not a separate object itself)]
	type=led
		pin			[gpio pin for led]
		bind		enum[selection]
			bind=selection:
				bindkey		[what bulb index to bind to (absolute value)]
			bind=services
				bindkey		[name of service: button|ultrasonic|ir]
			
** NOTE: All commands may as well be lists of commands. **

Expansion cards:
-----------------
name				[name of the card]
address				[I2C address]
startpin			[first pin to use as logical pin address]
registers			[list of <register>]

<register>
	name			[name of the register]
	size			[size in bits, default 8]
	datareg			[data register address for card]
	dirreg			[direction register address for card]
	initval			[initial value (optional), default 0x00]
	
Sounds
--------
name				[name to be used to reference it]
path				[path to the file, .wav works best]
start				[start time, optional]
end					[end time, optional]
loop				[default off, number of times to loop (0 means infinite many), optional]

Commands:
---------
toggleservice
	servicename [ir, button, ultrasonic]
setstate
	state		[new state to use]
setcolor
	color <color>
	-- or --
	colorlist [name of colorlist]
	mode [relative, absolute, value]
		mode=relative:
			value [index offset]
		mode=absolute:
			value [index value]
		mode=value:
			# Fetches value from sensor
setdimmer	(works only in mode 0)
	mode [relative, absolute, value]
		mode=relative:
			value [% dimmer increase/decrease, between -1 and 1]
		mode=absolute:
			value [% dimmer value, between 0 and 1]
		mode=value
			# Fetches value from sensor
setmode
	mode [absolute, value]
		mode=absolute
			value [integer: mode index 0-17, float: % of all modes]
		mode=value
			# Fetches value from sensor
setspeed
	mode [absolute, value]
		mode=absolute
			value [integer: speed 0-5, float: % of max speed]
		mode=value
			# Fetches value from sensor
setetd		(Sets effect-time-difference)
	mode [absolute, value]
		mode=absolute
			value [integer: etd value, float: % of max etd]
		mode=value
			# Fetches value from sensor
select
	mode [relative, absolute]
		mode=relative:
			value [index offset]
		mode=absolute:
			value [index value]
unselect
	mode [absolute]
		mode=absolute:
			value [index value]
toggleselect
	mode [absolute]
		mode=absolute:
			value [index value]
activate
deactivate
playsound
	sound [name of the sound]
stopsounds
restartnic
	nic			[initial part of the NIC, for example '', 'wlan' or 'wlan0']
		
		
Color:
------
red 			[red part]
green			[green part]
blue			[blue part]
white			[gives dimmed white light, 0-255]
unknown			[not implemented]